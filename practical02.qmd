---
title: "Getting started with R"
author: Tsokezo Tugnoua Lagloire
date: today
format: html
---

### Exercise 1 {#sec-1}

* Create a vector of the letters A, B and C.

```{r}
# Your answer in code
LETTERS[c(1:3)]
```
> Your answer as text



* Assign the vector to a variable `my_letters`
```{r}
# Your answer in code
my_letters <- LETTERS[c(1:3)]
```


* Check the what happens when you run `letters` (just this) on the command line.
```{r}
# Your answer in code
letters

```

> Your answer as text
It prints the english alphabets data types strings



* What happens when you concatenate two vectors? Add `c(my_letters , my_letters)`
```{r}
# Your answer in code
c(my_letters,my_letters)



```

> Your answer as text
It create a new vecto, where the values of the vector my_letters is duplicated.



* Add the number 1 to letters. What happens to the type of the vector?
```{r}
# Your answer in code
letters + 1


```

> Your answer as text
It creates and error since we adding two diffrent data types a string and a numeric which is impossible. Either we convert the numeric 1 to a string "1"



### Exercise 2


1. Create a vector `my_vec` with the numbers from 1 through 8.
2. Apply the operation `+2` to the vector/
3. Add the vector containing 1, 2, 3, 4 to `my_vec`. What do you observe? The vector is repeated in order to match the length of `my_vec` and then added. 


```{r}
# Your answer in code
my_vec <- c(1:8)
my_vec + 2
my_vec + c(1:4)

```



### Exercise 3

* Consider the R output of the matrix below:

```
 [,1] [,2]
 [1,]    4    1
 [2,]    9    5
 [3,]   10    7
```

1. What was one of the correct commands used to write this matrix?
matrix(c(4,9,10,1,5,7),nrow = 3, ncol = 2)

2. Assign the matrix as `A`

3. Check the dimensions
The dimensions of matrix A is 3 by 2.

4. Extract the element `5`
5. Add the vector `c(0,0,0)` as a new column and update `A`
6. Modify the element 4 to `0`
7. Compute the transpose of `A`

```{r}
# Your answer in code

A <- matrix(c(4,9,10,1,5,7),nrow = 3, ncol = 2)

# dimension of A
dimenA = dim(A)

# Extracting the element 5
A[2,2]

# Adding the vector `c(0,0,0)` as a new column and update `A`
A <- cbind (A,matrix(c(0,0,0),nrow = 3, ncol = 1))

# Modify the element 4 to `0`
A[1,1] <- 0
A

#Transpose of 'A'
t(A)
```


8. Are any values in `A` larger than 10? 
No, there is no value that is greater than 10.
```{r}
# Your answer in code
any(A > 10)

```

9. Are all values in `A` smaller than 10?
No, not all values are less than 10. The value A[3,1] is not smaller than 10.
```{r}
# Your answer in code
all(A < 10)


```

### Exercise 4

1. Create a function that sums up two values even if provided as characters values

```{r}
# Your answer in code
sum_values <- function(x, y) {
  x <- as.numeric(x)
  y <- as.numeric(y)
  return(x + y)
}


```


### Exercise 5

1. Create a function that returns the mean, median and standard deviation.

```{r}
# Your answer in code

basic_stats <- function(x) {
  mean_value <- mean(x, na.rm = TRUE)
  med <- median(x, na.rm = TRUE)
  sd_value <- sd(x, na.rm = TRUE)
  
  return(list(mean = mean_value, median = med, sd = sd_value))
}

```


### Exercise 6
1. Create a pipe statement that counts the number of NAs in vector containing numbers, characters and missing values.
The output of `c('1' , "a", NA, "2", NA)` should be 2.

```{r}
# Your answer in code
vec <- c('1', "a", NA, "2", NA)
na_count <- sum(is.na(vec))
na_count

```


